langgraph/
â”‚
â”œâ”€â”€ ðŸ“„ Configuration Files
â”‚   â”œâ”€â”€ package.json              # Dependencies and scripts
â”‚   â”œâ”€â”€ tsconfig.json             # TypeScript configuration
â”‚   â”œâ”€â”€ .env.example              # Environment template
â”‚   â”œâ”€â”€ .env                      # Your API keys (gitignored)
â”‚   â””â”€â”€ .gitignore                # Git ignore rules
â”‚
â”œâ”€â”€ ðŸ“š Documentation
â”‚   â”œâ”€â”€ README.md                 # Project overview & features
â”‚   â”œâ”€â”€ GETTING_STARTED.md        # Quick start guide (START HERE!)
â”‚   â”œâ”€â”€ USAGE.md                  # Detailed usage instructions
â”‚   â”œâ”€â”€ ARCHITECTURE.md           # System architecture docs
â”‚   â””â”€â”€ PROJECT_STRUCTURE.txt     # This file
â”‚
â”œâ”€â”€ ðŸ’» Source Code (src/)
â”‚   â”‚
â”‚   â”œâ”€â”€ ðŸ¤– Main Agent
â”‚   â”‚   â””â”€â”€ agent.ts              # Core agentic AI system
â”‚   â”‚                             # - Orchestrates all components
â”‚   â”‚                             # - Defines graph flow
â”‚   â”‚                             # - Interactive CLI
â”‚   â”‚
â”‚   â”œâ”€â”€ ðŸ§  Intelligence
â”‚   â”‚   â”œâ”€â”€ reasoning.ts          # Planning & reasoning engine
â”‚   â”‚   â”‚                         # - createPlan()
â”‚   â”‚   â”‚                         # - analyze()
â”‚   â”‚   â”‚                         # - reflect()
â”‚   â”‚   â”‚                         # - decide()
â”‚   â”‚   â”‚
â”‚   â”‚   â””â”€â”€ memory.ts             # Conversation persistence
â”‚   â”‚                             # - Checkpointing system
â”‚   â”‚                             # - Thread management
â”‚   â”‚                             # - State storage
â”‚   â”‚
â”‚   â”œâ”€â”€ ðŸ”§ Capabilities
â”‚   â”‚   â”œâ”€â”€ tools.ts              # Agent tools
â”‚   â”‚   â”‚                         # - Calculator
â”‚   â”‚   â”‚                         # - Note-taking
â”‚   â”‚   â”‚                         # - Web search (mock)
â”‚   â”‚   â”‚                         # - Date/time
â”‚   â”‚   â”‚
â”‚   â”‚   â””â”€â”€ human-input.ts        # Human-in-the-loop
â”‚   â”‚                             # - Interactive input
â”‚   â”‚                             # - Confirmations
â”‚   â”‚                             # - User prompts
â”‚   â”‚
â”‚   â””â”€â”€ ðŸ“– Examples
â”‚       â”œâ”€â”€ examples.ts           # Automated demonstrations
â”‚       â”‚                         # - Memory example
â”‚       â”‚                         # - Tool use example
â”‚       â”‚                         # - Planning example
â”‚       â”‚                         # - Contextual conversation
â”‚       â”‚
â”‚       â””â”€â”€ index.ts              # Simple getting started example
â”‚
â””â”€â”€ ðŸ“¦ Generated (after build)
    â””â”€â”€ dist/                     # Compiled JavaScript
        â””â”€â”€ ...

QUICK START:
1. npm install
2. cp .env.example .env (add your OPENAI_API_KEY)
3. npm run agent

AVAILABLE COMMANDS:
- npm run agent    â†’ Interactive agent (recommended!)
- npm run dev      â†’ Run automated examples
- npm run simple   â†’ Simple chatbot example
- npm run build    â†’ Compile TypeScript
- npm start        â†’ Run compiled code

FEATURES:
âœ“ Memory & Persistence
âœ“ Human-in-the-Loop
âœ“ Reasoning & Planning
âœ“ Tool Use (extensible)
âœ“ Non-streaming Responses
